// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MarketItemCreated extends ethereum.Event {
  get params(): MarketItemCreated__Params {
    return new MarketItemCreated__Params(this);
  }
}

export class MarketItemCreated__Params {
  _event: MarketItemCreated;

  constructor(event: MarketItemCreated) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get sold(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }

  get tokenUri(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class MarketItemListed extends ethereum.Event {
  get params(): MarketItemListed__Params {
    return new MarketItemListed__Params(this);
  }
}

export class MarketItemListed__Params {
  _event: MarketItemListed;

  constructor(event: MarketItemListed) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get sold(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }
}

export class MarketItemSold extends ethereum.Event {
  get params(): MarketItemSold__Params {
    return new MarketItemSold__Params(this);
  }
}

export class MarketItemSold__Params {
  _event: MarketItemSold;

  constructor(event: MarketItemSold) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get sold(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }

  get marketAddress(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Market___getCreatorInputMarketItemStruct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market___getOwnerInputMarketItemStruct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market___getSellerInputMarketItemStruct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market__fetchItemForIdResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market__fetchItemsCreatedResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market__fetchItemsCreatedByResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market__fetchItemsListedResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market__fetchItemsListedByResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market__fetchItemsOwnedByResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market__fetchMarketItemsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market__fetchMyNFTsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get creator(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get sold(): boolean {
    return this[7].toBoolean();
  }
}

export class Market extends ethereum.SmartContract {
  static bind(address: Address): Market {
    return new Market("Market", address);
  }

  _getCreator(marketItem: Market___getCreatorInputMarketItemStruct): Address {
    let result = super.call(
      "_getCreator",
      "_getCreator((uint256,address,uint256,address,address,address,uint256,bool)):(address)",
      [ethereum.Value.fromTuple(marketItem)]
    );

    return result[0].toAddress();
  }

  try__getCreator(
    marketItem: Market___getCreatorInputMarketItemStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_getCreator",
      "_getCreator((uint256,address,uint256,address,address,address,uint256,bool)):(address)",
      [ethereum.Value.fromTuple(marketItem)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _getOwner(marketItem: Market___getOwnerInputMarketItemStruct): Address {
    let result = super.call(
      "_getOwner",
      "_getOwner((uint256,address,uint256,address,address,address,uint256,bool)):(address)",
      [ethereum.Value.fromTuple(marketItem)]
    );

    return result[0].toAddress();
  }

  try__getOwner(
    marketItem: Market___getOwnerInputMarketItemStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_getOwner",
      "_getOwner((uint256,address,uint256,address,address,address,uint256,bool)):(address)",
      [ethereum.Value.fromTuple(marketItem)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _getSeller(marketItem: Market___getSellerInputMarketItemStruct): Address {
    let result = super.call(
      "_getSeller",
      "_getSeller((uint256,address,uint256,address,address,address,uint256,bool)):(address)",
      [ethereum.Value.fromTuple(marketItem)]
    );

    return result[0].toAddress();
  }

  try__getSeller(
    marketItem: Market___getSellerInputMarketItemStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_getSeller",
      "_getSeller((uint256,address,uint256,address,address,address,uint256,bool)):(address)",
      [ethereum.Value.fromTuple(marketItem)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchItemForId(itemId: BigInt): Market__fetchItemForIdResultValue0Struct {
    let result = super.call(
      "fetchItemForId",
      "fetchItemForId(uint256):((uint256,address,uint256,address,address,address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );

    return result[0].toTuple() as Market__fetchItemForIdResultValue0Struct;
  }

  try_fetchItemForId(
    itemId: BigInt
  ): ethereum.CallResult<Market__fetchItemForIdResultValue0Struct> {
    let result = super.tryCall(
      "fetchItemForId",
      "fetchItemForId(uint256):((uint256,address,uint256,address,address,address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Market__fetchItemForIdResultValue0Struct
    );
  }

  fetchItemsCreated(): Array<Market__fetchItemsCreatedResultValue0Struct> {
    let result = super.call(
      "fetchItemsCreated",
      "fetchItemsCreated():((uint256,address,uint256,address,address,address,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<
      Market__fetchItemsCreatedResultValue0Struct
    >();
  }

  try_fetchItemsCreated(): ethereum.CallResult<
    Array<Market__fetchItemsCreatedResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchItemsCreated",
      "fetchItemsCreated():((uint256,address,uint256,address,address,address,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Market__fetchItemsCreatedResultValue0Struct>()
    );
  }

  fetchItemsCreatedBy(
    addr: Address
  ): Array<Market__fetchItemsCreatedByResultValue0Struct> {
    let result = super.call(
      "fetchItemsCreatedBy",
      "fetchItemsCreatedBy(address):((uint256,address,uint256,address,address,address,uint256,bool)[])",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toTupleArray<
      Market__fetchItemsCreatedByResultValue0Struct
    >();
  }

  try_fetchItemsCreatedBy(
    addr: Address
  ): ethereum.CallResult<Array<Market__fetchItemsCreatedByResultValue0Struct>> {
    let result = super.tryCall(
      "fetchItemsCreatedBy",
      "fetchItemsCreatedBy(address):((uint256,address,uint256,address,address,address,uint256,bool)[])",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Market__fetchItemsCreatedByResultValue0Struct>()
    );
  }

  fetchItemsListed(): Array<Market__fetchItemsListedResultValue0Struct> {
    let result = super.call(
      "fetchItemsListed",
      "fetchItemsListed():((uint256,address,uint256,address,address,address,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<Market__fetchItemsListedResultValue0Struct>();
  }

  try_fetchItemsListed(): ethereum.CallResult<
    Array<Market__fetchItemsListedResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchItemsListed",
      "fetchItemsListed():((uint256,address,uint256,address,address,address,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Market__fetchItemsListedResultValue0Struct>()
    );
  }

  fetchItemsListedBy(
    addr: Address
  ): Array<Market__fetchItemsListedByResultValue0Struct> {
    let result = super.call(
      "fetchItemsListedBy",
      "fetchItemsListedBy(address):((uint256,address,uint256,address,address,address,uint256,bool)[])",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toTupleArray<
      Market__fetchItemsListedByResultValue0Struct
    >();
  }

  try_fetchItemsListedBy(
    addr: Address
  ): ethereum.CallResult<Array<Market__fetchItemsListedByResultValue0Struct>> {
    let result = super.tryCall(
      "fetchItemsListedBy",
      "fetchItemsListedBy(address):((uint256,address,uint256,address,address,address,uint256,bool)[])",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Market__fetchItemsListedByResultValue0Struct>()
    );
  }

  fetchItemsOwnedBy(
    addr: Address
  ): Array<Market__fetchItemsOwnedByResultValue0Struct> {
    let result = super.call(
      "fetchItemsOwnedBy",
      "fetchItemsOwnedBy(address):((uint256,address,uint256,address,address,address,uint256,bool)[])",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toTupleArray<
      Market__fetchItemsOwnedByResultValue0Struct
    >();
  }

  try_fetchItemsOwnedBy(
    addr: Address
  ): ethereum.CallResult<Array<Market__fetchItemsOwnedByResultValue0Struct>> {
    let result = super.tryCall(
      "fetchItemsOwnedBy",
      "fetchItemsOwnedBy(address):((uint256,address,uint256,address,address,address,uint256,bool)[])",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Market__fetchItemsOwnedByResultValue0Struct>()
    );
  }

  fetchMarketItems(): Array<Market__fetchMarketItemsResultValue0Struct> {
    let result = super.call(
      "fetchMarketItems",
      "fetchMarketItems():((uint256,address,uint256,address,address,address,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<Market__fetchMarketItemsResultValue0Struct>();
  }

  try_fetchMarketItems(): ethereum.CallResult<
    Array<Market__fetchMarketItemsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchMarketItems",
      "fetchMarketItems():((uint256,address,uint256,address,address,address,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Market__fetchMarketItemsResultValue0Struct>()
    );
  }

  fetchMyNFTs(): Array<Market__fetchMyNFTsResultValue0Struct> {
    let result = super.call(
      "fetchMyNFTs",
      "fetchMyNFTs():((uint256,address,uint256,address,address,address,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<Market__fetchMyNFTsResultValue0Struct>();
  }

  try_fetchMyNFTs(): ethereum.CallResult<
    Array<Market__fetchMyNFTsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchMyNFTs",
      "fetchMyNFTs():((uint256,address,uint256,address,address,address,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Market__fetchMyNFTsResultValue0Struct>()
    );
  }

  getBalance(): BigInt {
    let result = super.call("getBalance", "getBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListingPrice(): BigInt {
    let result = super.call(
      "getListingPrice",
      "getListingPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getListingPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getListingPrice",
      "getListingPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateMarketItemCall extends ethereum.Call {
  get inputs(): CreateMarketItemCall__Inputs {
    return new CreateMarketItemCall__Inputs(this);
  }

  get outputs(): CreateMarketItemCall__Outputs {
    return new CreateMarketItemCall__Outputs(this);
  }
}

export class CreateMarketItemCall__Inputs {
  _call: CreateMarketItemCall;

  constructor(call: CreateMarketItemCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateMarketItemCall__Outputs {
  _call: CreateMarketItemCall;

  constructor(call: CreateMarketItemCall) {
    this._call = call;
  }
}

export class CreateMarketSaleCall extends ethereum.Call {
  get inputs(): CreateMarketSaleCall__Inputs {
    return new CreateMarketSaleCall__Inputs(this);
  }

  get outputs(): CreateMarketSaleCall__Outputs {
    return new CreateMarketSaleCall__Outputs(this);
  }
}

export class CreateMarketSaleCall__Inputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get itemId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateMarketSaleCall__Outputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ListMarketItemCall extends ethereum.Call {
  get inputs(): ListMarketItemCall__Inputs {
    return new ListMarketItemCall__Inputs(this);
  }

  get outputs(): ListMarketItemCall__Outputs {
    return new ListMarketItemCall__Outputs(this);
  }
}

export class ListMarketItemCall__Inputs {
  _call: ListMarketItemCall;

  constructor(call: ListMarketItemCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get itemId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListMarketItemCall__Outputs {
  _call: ListMarketItemCall;

  constructor(call: ListMarketItemCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetListingPriceCall extends ethereum.Call {
  get inputs(): SetListingPriceCall__Inputs {
    return new SetListingPriceCall__Inputs(this);
  }

  get outputs(): SetListingPriceCall__Outputs {
    return new SetListingPriceCall__Outputs(this);
  }
}

export class SetListingPriceCall__Inputs {
  _call: SetListingPriceCall;

  constructor(call: SetListingPriceCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetListingPriceCall__Outputs {
  _call: SetListingPriceCall;

  constructor(call: SetListingPriceCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
